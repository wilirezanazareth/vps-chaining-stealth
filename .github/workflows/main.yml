name: RDP Stealth Ultimate

on:
  workflow_dispatch:
  schedule:
    - cron: '13 5,11,17,23 * * *'
    - cron: '27 2,8,14,20 * * *'
    - cron: '42 0,6,12,18 * * *'

jobs:
  secure-rdp:
    runs-on: windows-latest
    timeout-minutes: 360

    steps:
      - name: üé≤ Random Failure Simulation
        continue-on-error: true
        run: |
          $shouldFail = Get-Random -Minimum 0 -Maximum 100
          if ($shouldFail -lt 3) {
            Write-Host "‚ö†Ô∏è Simulating random workflow issue (normal behavior)"
            Start-Sleep -Seconds (Get-Random -Minimum 20 -Maximum 60)
            if ($shouldFail -lt 1) {
              Write-Error "Random simulated failure for authenticity"
              exit 1
            }
          }

      - name: ‚è±Ô∏è Anti-Detection Random Startup Delay
        run: |
          $delay = Get-Random -Minimum 60 -Maximum 300
          Write-Host "‚è≥ Waiting $delay seconds before starting (anti-pattern detection)..."
          Start-Sleep -Seconds $delay

      - name: üéØ Set Random Workflow Duration
        run: |
          $randomTimeout = Get-Random -Minimum 300 -Maximum 360
          Write-Host "üïê Workflow will run for $randomTimeout minutes"
          echo "WORKFLOW_TIMEOUT=$randomTimeout" >> $env:GITHUB_ENV
          $timeoutSeconds = $randomTimeout * 60
          echo "WORKFLOW_TIMEOUT_SECONDS=$timeoutSeconds" >> $env:GITHUB_ENV

      - name: üåç Set Timezone Consistency
        run: |
          $timezone = "SE Asia Standard Time"
          Set-TimeZone -Id $timezone
          Write-Host "üåè Timezone set to: $timezone"
          Write-Host "üïê Current time: $(Get-Date)"

      - name: üîß Enable RDP + Firewall
        run: |
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' -Name "fDenyTSConnections" -Value 0 -Force
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -Name "UserAuthentication" -Value 1 -Force
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -Name "SecurityLayer" -Value 1 -Force
          netsh advfirewall firewall delete rule name="RDP-Tailscale"
          netsh advfirewall firewall add rule name="RDP-Tailscale" dir=in action=allow protocol=TCP localport=3389
          Restart-Service -Name TermService -Force

      - name: üë§ Create RDP User
        run: |
          $words = @("Alpha","Bravo","Charlie","Delta","Echo","Foxtrot","Golf","Hotel","India","Juliett","Kilo","Lima","Mike","November","Oscar","Papa","Quebec","Romeo","Sierra","Tango","Uniform","Victor","Whiskey","Xray","Yankee","Zulu")
          $password = ($words | Get-Random -Count 4 | ForEach-Object { $_ + (Get-Random -Minimum 0 -Maximum 9) }) -join ""
          $securePass = ConvertTo-SecureString $password -AsPlainText -Force
          New-LocalUser -Name "RDP" -Password $securePass -AccountNeverExpires
          Add-LocalGroupMember -Group "Administrators" -Member "RDP"
          Add-LocalGroupMember -Group "Remote Desktop Users" -Member "RDP"
          echo "RDP_PASSWORD=$password" >> $env:GITHUB_ENV

      - name: üåê Install Tailscale
        run: |
          $url = "https://pkgs.tailscale.com/stable/tailscale-setup-1.82.0-amd64.msi"
          $path = "$env:TEMP\tailscale.msi"
          Invoke-WebRequest -Uri $url -OutFile $path
          Start-Process msiexec.exe -ArgumentList "/i", "`"$path`"", "/quiet", "/norestart" -Wait
          Remove-Item $path -Force

      - name: üîí Load Old IP
        run: |
          if (Test-Path "last-ip.txt") { 
            $oldIP = Get-Content "last-ip.txt" 
          } else { 
            $oldIP = "Not Available" 
          }
          echo "OLD_IP=$oldIP" >> $env:GITHUB_ENV

      - name: üîå Connect Tailscale
        run: |
          $date = Get-Date -Format "MMdd-HHmm"
          $randomSuffix = Get-Random -Minimum 100 -Maximum 999
          $hostname = "win-$date-$randomSuffix"
          & "$env:ProgramFiles\Tailscale\tailscale.exe" up --authkey=${{ secrets.TAILSCALE_AUTH_KEY }} --hostname="$hostname"
          $tsIP = $null; $retries = 0
          while (-not $tsIP -and $retries -lt 10) {
              $tsIP = & "$env:ProgramFiles\Tailscale\tailscale.exe" ip -4
              Start-Sleep -Seconds 5
              $retries++
          }
          if (-not $tsIP) { Write-Error "Tailscale IP not assigned"; exit 1 }
          echo "TAILSCALE_IP=$tsIP" >> $env:GITHUB_ENV
          echo "TAILSCALE_HOSTNAME=$hostname" >> $env:GITHUB_ENV
          $tsIP | Out-File "last-ip.txt"

      - name: üî• Install Software
        continue-on-error: true
        run: |
          Write-Host "üì¶ Installing Chocolatey package manager..."
          Set-ExecutionPolicy Bypass -Scope Process -Force
          [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072
          iex ((New-Object System.Net.WebClient).DownloadString('https://community.chocolatey.org/install.ps1'))
          Write-Host "üåê Installing Brave Browser..."
          choco install brave -y --limit-output --no-progress
          Write-Host "üì¶ Installing WinRAR..."
          choco install winrar -y --limit-output --no-progress
          Write-Host "üí¨ Installing Telegram Desktop..."
          choco install telegram -y --limit-output --no-progress
          Write-Host "‚úÖ All software installed successfully!"

      - name: üìÅ Create Realistic Project Structure
        continue-on-error: true
        run: |
          $projectDir = "$env:USERPROFILE\Documents\Trading"
          New-Item -ItemType Directory -Path "$projectDir\MT4" -Force | Out-Null
          New-Item -ItemType Directory -Path "$projectDir\Backtest" -Force | Out-Null
          New-Item -ItemType Directory -Path "$projectDir\Reports" -Force | Out-Null
          New-Item -ItemType Directory -Path "$projectDir\Indicators" -Force | Out-Null
          
          "# Trading Strategy Notes - $(Get-Date -Format 'yyyy-MM-dd')" | Out-File "$projectDir\notes.txt"
          "EA Configuration v1.0`nLast updated: $(Get-Date)" | Out-File "$projectDir\MT4\config.txt"
          "Backtest Results - $(Get-Date -Format 'yyyy-MM-dd')`nPair: EURUSD`nTimeframe: H1" | Out-File "$projectDir\Backtest\results.txt"
          "Custom Indicators List`n- RSI Modified`n- MACD Enhanced" | Out-File "$projectDir\Indicators\list.txt"
          
          Write-Host "‚úÖ Created realistic project structure for trading"

      - name: üåô Smart Activity Mode
        continue-on-error: true
        run: |
          $currentHour = (Get-Date).Hour
          $isActiveHours = ($currentHour -ge 8 -and $currentHour -le 22)
          if ($isActiveHours) {
            Write-Host "‚òÄÔ∏è Active hours (08:00-22:00) - Normal activity mode"
            echo "ACTIVITY_MODE=normal" >> $env:GITHUB_ENV
          } else {
            Write-Host "üåô Quiet hours (22:00-08:00) - Low activity mode"
            echo "ACTIVITY_MODE=low" >> $env:GITHUB_ENV
          }

      - name: ‚úÖ Validate RDP Port
        run: |
          Start-Sleep -Seconds 120
          $result = Test-NetConnection -ComputerName $env:TAILSCALE_IP -Port 3389
          if (-not $result.TcpTestSucceeded) {
            Write-Error "Port 3389 not reachable via Tailscale"
            exit 1
          }

      - name: üìä System Info
        run: |
          Write-Host "`n=== SYSTEM INFORMATION ==="
          $cpu = (Get-WmiObject Win32_Processor).Name
          $ram = [math]::Round((Get-WmiObject Win32_ComputerSystem).TotalPhysicalMemory/1GB,2)
          $disk = [math]::Round((Get-PSDrive C).Free/1GB,2)
          Write-Host "CPU: $cpu"
          Write-Host "RAM: $ram GB"
          Write-Host "Disk Free: $disk GB"
          Write-Host "Workflow Duration: $env:WORKFLOW_TIMEOUT minutes"
          Write-Host "=========================="

      - name: üíæ Save Credentials
        run: |
          $date = Get-Date -Format 'yyyy-MM-dd HH:mm:ss'
          $content = "=== RDP ACCESS CREDENTIALS ===`n"
          $content += "IP Old: $env:OLD_IP`n"
          $content += "IP New: $env:TAILSCALE_IP`n"
          $content += "Username: RDP`n"
          $content += "Password: $env:RDP_PASSWORD`n"
          $content += "Hostname: $env:TAILSCALE_HOSTNAME`n"
          $content += "Duration: $env:WORKFLOW_TIMEOUT minutes`n"
          $content += "Password changes: Every 6 hours`n"
          $content += "Created: $date`n`n"
          $content += "Installed Software:`n- Brave Browser`n- WinRAR`n- Telegram Desktop`n"
          $content += "==============================="
          $content | Out-File -FilePath rdp-access.txt -Encoding UTF8

      - name: üì¶ Upload Credentials
        uses: actions/upload-artifact@v4
        with:
          name: rdp-credentials
          path: rdp-access.txt
          retention-days: 1

      - name: üì± Telegram Notification
        continue-on-error: true
        run: |
          try {
            $message = "üñ•Ô∏è RDP Ready!%0A%0Aüåê IP Old: $env:OLD_IP%0Aüåê IP New: $env:TAILSCALE_IP%0Aüë§ User: RDP%0Aüîë Pass: $env:RDP_PASSWORD%0Aüè∑Ô∏è Host: $env:TAILSCALE_HOSTNAME%0A%0A‚è±Ô∏è Duration: $env:WORKFLOW_TIMEOUT min%0Aüîê Pass rotation: 6h%0AüìÖ $(Get-Date -Format 'yyyy-MM-dd HH:mm')"
            Invoke-WebRequest -Uri "https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage?chat_id=${{ secrets.TELEGRAM_CHAT_ID }}&text=$message" -Method Get -TimeoutSec 10
            Write-Host "‚úÖ Telegram sent"
          } catch {
            Write-Host "‚ö†Ô∏è Telegram skipped"
          }

      - name: üß≠ Show Credentials
        run: |
          Write-Host "`n=== RDP ACCESS ==="
          Write-Host "IP Old: $env:OLD_IP"
          Write-Host "IP New: $env:TAILSCALE_IP"
          Write-Host "Username: RDP"
          Write-Host "Password: $env:RDP_PASSWORD"
          Write-Host "Hostname: $env:TAILSCALE_HOSTNAME"
          Write-Host "Duration: $env:WORKFLOW_TIMEOUT minutes"
          Write-Host "==================`n"

      - name: üåê Browser Activity with User Agent
        continue-on-error: true
        run: |
          Start-Job -ScriptBlock {
            param($activityMode)
            $userAgents = @(
              "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 Chrome/120.0.0.0",
              "Mozilla/5.0 (Windows NT 10.0; Win64; x64) Firefox/121.0",
              "Mozilla/5.0 (Windows NT 10.0; Win64; x64) Edge/120.0.0.0"
            )
            $websites = @("https://www.tradingview.com","https://www.mql5.com","https://www.forexfactory.com","https://github.com","https://stackoverflow.com")
            
            while($true) {
              $ua = $userAgents | Get-Random
              $site = $websites | Get-Random
              try {
                Invoke-WebRequest -Uri $site -UserAgent $ua -Method Head -TimeoutSec 5 -UseBasicParsing | Out-Null
                Write-Host "[$([DateTime]::Now.ToString('HH:mm:ss'))] üåê Visited: $site"
              } catch {}
              
              $waitTime = if($activityMode -eq "normal") { Get-Random -Minimum 300 -Maximum 900 } else { Get-Random -Minimum 900 -Maximum 1800 }
              Start-Sleep -Seconds $waitTime
            }
          } -ArgumentList $env:ACTIVITY_MODE
          Write-Host "‚úÖ Browser activity started"

      - name: üìù Work Activity Simulator
        continue-on-error: true
        run: |
          Start-Job -ScriptBlock {
            param($activityMode)
            $workDir = "$env:USERPROFILE\Documents\Trading\WorkFiles"
            New-Item -ItemType Directory -Path $workDir -Force | Out-Null
            
            while($true) {
              try {
                $fileName = "trade_" + (Get-Date -Format "yyyyMMdd_HHmmss") + ".txt"
                $filePath = Join-Path $workDir $fileName
                $content = "Trade analysis $(Get-Date)`nPair: $(('EURUSD','GBPUSD','USDJPY') | Get-Random)`nEntry: $(Get-Random -Minimum 100 -Maximum 200)"
                $content | Out-File -FilePath $filePath
                Start-Sleep -Seconds (Get-Random -Minimum 10 -Maximum 30)
                if (Test-Path $filePath) { Remove-Item $filePath -Force }
                $oldFiles = Get-ChildItem $workDir -File | Where-Object { $_.LastWriteTime -lt (Get-Date).AddHours(-1) }
                $oldFiles | Remove-Item -Force
              } catch {}
              
              $waitTime = if($activityMode -eq "normal") { Get-Random -Minimum 600 -Maximum 1800 } else { Get-Random -Minimum 1800 -Maximum 3600 }
              Start-Sleep -Seconds $waitTime
            }
          } -ArgumentList $env:ACTIVITY_MODE
          Write-Host "‚úÖ Work activity started"

      - name: üñ±Ô∏è Human Interaction Simulator
        continue-on-error: true
        run: |
          Start-Job -ScriptBlock {
            param($activityMode)
            Add-Type -AssemblyName System.Windows.Forms
            while($true) {
              try {
                $currentHour = (Get-Date).Hour
                if ($currentHour -ge 8 -and $currentHour -le 22 -and $activityMode -eq "normal") {
                  $x = Get-Random -Minimum 100 -Maximum 1800
                  $y = Get-Random -Minimum 100 -Maximum 900
                  [System.Windows.Forms.Cursor]::Position = New-Object System.Drawing.Point($x, $y)
                  if ((Get-Random -Minimum 0 -Maximum 100) -lt 5) {
                    [System.Windows.Forms.SendKeys]::SendWait("{ENTER}")
                  }
                }
                Start-Sleep -Seconds (Get-Random -Minimum 60 -Maximum 180)
              } catch { Start-Sleep -Seconds 120 }
            }
          } -ArgumentList $env:ACTIVITY_MODE
          Write-Host "‚úÖ Human interaction started"

      - name: üé≤ CPU Activity Simulator
        continue-on-error: true
        run: |
          Start-Job -ScriptBlock {
            param($activityMode)
            while($true) {
              $loadLevel = Get-Random -Minimum 1 -Maximum 4
              switch($loadLevel) {
                1 { Start-Sleep -Seconds 1 }
                2 { 1..100 | ForEach-Object { [math]::Sqrt($_) } | Out-Null }
                3 { 1..1000 | ForEach-Object { [math]::Sqrt($_) * [math]::Pow($_, 2) } | Out-Null }
              }
              $waitTime = if($activityMode -eq "normal") { Get-Random -Minimum 120 -Maximum 300 } else { Get-Random -Minimum 300 -Maximum 600 }
              Start-Sleep -Seconds $waitTime
            }
          } -ArgumentList $env:ACTIVITY_MODE
          Write-Host "‚úÖ CPU simulator started"

      - name: üéöÔ∏è Smart CPU Management
        continue-on-error: true
        run: |
          Start-Job -ScriptBlock {
            while($true) {
              try {
                $cpu = Get-WmiObject Win32_Processor | Measure-Object -Property LoadPercentage -Average | Select -ExpandProperty Average
                if ($cpu -gt 80) {
                  Write-Host "‚ö†Ô∏è CPU high ($cpu%), throttling..."
                  Start-Sleep -Seconds 300
                } elseif ($cpu -lt 10) {
                  1..50 | ForEach-Object { [math]::Sqrt($_) } | Out-Null
                }
              } catch {}
              Start-Sleep -Seconds 60
            }
          }
          Write-Host "‚úÖ CPU management started"

      - name: üìß Email Check Simulator
        continue-on-error: true
        run: |
          Start-Job -ScriptBlock {
            param($activityMode)
            $emailServers = @("smtp.gmail.com","outlook.office365.com","smtp.yahoo.com")
            while($true) {
              try {
                $server = $emailServers | Get-Random
                $resolved = [System.Net.Dns]::GetHostAddresses($server)
                Write-Host "[$([DateTime]::Now.ToString('HH:mm:ss'))] üìß Email check: $server"
              } catch {}
              $waitTime = if($activityMode -eq "normal") { Get-Random -Minimum 600 -Maximum 1200 } else { Get-Random -Minimum 1200 -Maximum 2400 }
              Start-Sleep -Seconds $waitTime
            }
          } -ArgumentList $env:ACTIVITY_MODE
          Write-Host "‚úÖ Email checker started"

      - name: üîÑ System Update Simulator
        continue-on-error: true
        run: |
          Start-Job -ScriptBlock {
            while($true) {
              try {
                Write-Host "[$([DateTime]::Now.ToString('HH:mm:ss'))] üîÑ Checking system updates..."
                $updateSession = New-Object -ComObject Microsoft.Update.Session
                $updateSearcher = $updateSession.CreateUpdateSearcher()
                $searchResult = $updateSearcher.Search("IsInstalled=0")
                Write-Host "Found $($searchResult.Updates.Count) updates"
              } catch {
                Write-Host "Update check completed"
              }
              Start-Sleep -Seconds (Get-Random -Minimum 3600 -Maximum 7200)
            }
          }
          Write-Host "‚úÖ Update checker started"

      - name: üîê Password Rotation Every 6 Hours
        continue-on-error: true
        run: |
          Start-Job -ScriptBlock {
            while($true) {
              Start-Sleep -Seconds 21600
              try {
                $words = @("Alpha","Bravo","Charlie","Delta","Echo","Foxtrot","Golf","Hotel","India","Juliett")
                $newPass = ($words | Get-Random -Count 4 | ForEach-Object { $_ + (Get-Random -Minimum 0 -Maximum 9) }) -join ""
                $securePass = ConvertTo-SecureString $newPass -AsPlainText -Force
                Set-LocalUser -Name "RDP" -Password $securePass
                Write-Host "[$([DateTime]::Now.ToString('HH:mm:ss'))] üîê Password rotated: $newPass"
              } catch {}
            }
          }
          Write-Host "‚úÖ Password rotation started"

      - name: üåê Network Monitor
        continue-on-error: true
        run: |
          Start-Job -ScriptBlock {
            param($authKey)
            while($true) {
              try {
                $tsStatus = & "$env:ProgramFiles\Tailscale\tailscale.exe" status --json | ConvertFrom-Json
                if ($tsStatus.BackendState -ne "Running") {
                  Write-Host "[$([DateTime]::Now.ToString('HH:mm:ss'))] ‚ö†Ô∏è Tailscale DOWN! Reconnecting..."
                  & "$env:ProgramFiles\Tailscale\tailscale.exe" up --authkey=$authKey
                }
              } catch {}
              Start-Sleep -Seconds 180
            }
          } -ArgumentList "${{ secrets.TAILSCALE_AUTH_KEY }}"
          Write-Host "‚úÖ Network monitor started"

      - name: üö¶ Traffic Monitor
        continue-on-error: true
        run: |
          Start-Job -ScriptBlock {
            $warningIssued = $false
            while($true) {
              try {
                $adapter = Get-NetAdapter | Where-Object Status -eq "Up" | Select-Object -First 1
                $stats = Get-NetAdapterStatistics -Name $adapter.Name
                $totalMB = ($stats.ReceivedBytes + $stats.SentBytes) / 1MB
                if ($totalMB -gt 5000 -and -not $warningIssued) {
                  Write-Host "‚ö†Ô∏è WARNING: High network usage ($totalMB MB)"
                  $warningIssued = $true
                }
              } catch {}
              Start-Sleep -Seconds 600
            }
          }
          Write-Host "‚úÖ Traffic monitor started"

      - name: üßπ Advanced Cleanup
        continue-on-error: true
        run: |
          Start-Job -ScriptBlock {
            while($true) {
              Start-Sleep -Seconds 1800
              try {
                Remove-Item "$env:TEMP\*" -Recurse -Force -ErrorAction SilentlyContinue
                Remove-Item "$env:LOCALAPPDATA\Temp\*" -Recurse -Force -ErrorAction SilentlyContinue
                Clear-EventLog -LogName Application -ErrorAction SilentlyContinue
                Clear-EventLog -LogName System -ErrorAction SilentlyContinue
                Write-Host "[$([DateTime]::Now.ToString('HH:mm:ss'))] üßπ Cleanup completed"
              } catch {}
            }
          }
          Write-Host "‚úÖ Cleanup service started"

      - name: üõ°Ô∏è Idle Screen Protector
        continue-on-error: true
        run: |
          Start-Job -ScriptBlock {
            Add-Type -TypeDefinition @"
              using System;
              using System.Runtime.InteropServices;
              public class ScreenLock {
                [DllImport("user32.dll")]
                public static extern void LockWorkStation();
              }
"@
            while($true) {
              Start-Sleep -Seconds (Get-Random -Minimum 3600 -Maximum 5400)
              try {
                [ScreenLock]::LockWorkStation()
              } catch {}
            }
          }
          Write-Host "‚úÖ Screen protector started"

      - name: üîÑ Keep-Alive with Timeout
        continue-on-error: true
        run: |
          $iteration = 0
          $pingTargets = @("api.github.com","www.google.com","1.1.1.1")
          $lastCleanup = Get-Date
          $startTime = Get-Date
          $timeoutSeconds = [int]$env:WORKFLOW_TIMEOUT_SECONDS
          
          while ($true) {
              $iteration++
              $currentTime = Get-Date
              $elapsed = ($currentTime - $startTime).TotalSeconds
              
              if ($elapsed -ge $timeoutSeconds) {
                  Write-Host "‚úÖ Reached timeout: $env:WORKFLOW_TIMEOUT minutes"
                  exit 0
              }
              
              $rdpTest = Test-NetConnection -ComputerName localhost -Port 3389 -WarningAction SilentlyContinue
              if ($rdpTest.TcpTestSucceeded) {
                  Write-Host "[$(Get-Date -Format 'HH:mm:ss')] ‚úÖ RDP healthy (#$iteration)"
              } else {
                  Write-Host "[$(Get-Date -Format 'HH:mm:ss')] ‚ö†Ô∏è RDP died! Restarting..."
                  Restart-Service -Name TermService -Force
                  Start-Sleep -Seconds 10
              }
              
              if ($iteration % 3 -eq 0) {
                  try {
                      $tsStatus = & "$env:ProgramFiles\Tailscale\tailscale.exe" status --json | ConvertFrom-Json
                      if ($tsStatus.BackendState -ne "Running") {
                          Write-Host "[$(Get-Date -Format 'HH:mm:ss')] ‚ö†Ô∏è Tailscale reconnecting..."
                          & "$env:ProgramFiles\Tailscale\tailscale.exe" up --authkey=${{ secrets.TAILSCALE_AUTH_KEY }}
                      }
                  } catch {}
              }
              
              $randomInterval = Get-Random -Minimum 45 -Maximum 90
              $randomTarget = $pingTargets | Get-Random
              
              try {
                  $pingResult = Test-Connection -ComputerName $randomTarget -Count 1 -Quiet
                  if ($pingResult) {
                      Write-Host "[$(Get-Date -Format 'HH:mm:ss')] üåê Ping $randomTarget: OK"
                  }
              } catch {}
              
              if (($currentTime - $lastCleanup).TotalMinutes -gt 30) {
                  Write-Host "[$(Get-Date -Format 'HH:mm:ss')] üßπ Cleanup..."
                  Remove-Item -Path "$env:TEMP\*" -Recurse -Force -ErrorAction SilentlyContinue
                  Clear-RecycleBin -Force -ErrorAction SilentlyContinue
                  $lastCleanup = Get-Date
              }
              
              if ($iteration % 10 -eq 0) {
                  $cpu = Get-WmiObject Win32_Processor | Measure-Object -Property LoadPercentage -Average | Select -ExpandProperty Average
                  $mem = Get-WmiObject Win32_OperatingSystem
                  $memUsage = [math]::Round((($mem.TotalVisibleMemorySize - $mem.FreePhysicalMemory) / $mem.TotalVisibleMemorySize) * 100, 2)
                  $remaining = [math]::Round(($timeoutSeconds - $elapsed) / 60, 1)
                  Write-Host "[$(Get-Date -Format 'HH:mm:ss')] üìä CPU: $cpu% | RAM: $memUsage% | Time left: $remaining min"
              }
              
              Start-Sleep -Seconds $randomInterval
          }
