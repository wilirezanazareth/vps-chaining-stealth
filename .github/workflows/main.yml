name: RDP Stealth

on:
  workflow_dispatch:
  schedule:
    - cron: '0 */6 * * *'

jobs:
  secure-rdp:
    runs-on: windows-latest
    timeout-minutes: 360

    steps:
      - name: üé≠ Anti-Detection: Random Startup Delay
        run: |
          $delay = Get-Random -Minimum 60 -Maximum 300
          Write-Host "Waiting $delay seconds before starting (anti-pattern detection)..."
          Start-Sleep -Seconds $delay

      - name: üîß Enable RDP + Firewall
        run: |
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' -Name "fDenyTSConnections" -Value 0 -Force
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -Name "UserAuthentication" -Value 1 -Force
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -Name "SecurityLayer" -Value 1 -Force
          netsh advfirewall firewall delete rule name="RDP-Tailscale"
          netsh advfirewall firewall add rule name="RDP-Tailscale" dir=in action=allow protocol=TCP localport=3389
          Restart-Service -Name TermService -Force

      - name: üë§ Create RDP User
        run: |
          $words = @("Alpha","Bravo","Charlie","Delta","Echo","Foxtrot","Golf","Hotel","India","Juliett","Kilo","Lima","Mike","November","Oscar","Papa","Quebec","Romeo","Sierra","Tango","Uniform","Victor","Whiskey","Xray","Yankee","Zulu")
          $password = ($words | Get-Random -Count 4 | ForEach-Object { $_ + (Get-Random -Minimum 0 -Maximum 9) }) -join ""
          $securePass = ConvertTo-SecureString $password -AsPlainText -Force
          New-LocalUser -Name "RDP" -Password $securePass -AccountNeverExpires
          Add-LocalGroupMember -Group "Administrators" -Member "RDP"
          Add-LocalGroupMember -Group "Remote Desktop Users" -Member "RDP"
          echo "RDP_PASSWORD=$password" >> $env:GITHUB_ENV

      - name: üåê Install Tailscale
        run: |
          $url = "https://pkgs.tailscale.com/stable/tailscale-setup-1.82.0-amd64.msi"
          $path = "$env:TEMP\tailscale.msi"
          Invoke-WebRequest -Uri $url -OutFile $path
          Start-Process msiexec.exe -ArgumentList "/i", "`"$path`"", "/quiet", "/norestart" -Wait
          Remove-Item $path -Force

      - name: üîí Load old IP if exists
        run: |
          if (Test-Path "last-ip.txt") { 
            $oldIP = Get-Content "last-ip.txt" 
          } else { 
            $oldIP = "Not Available" 
          }
          echo "OLD_IP=$oldIP" >> $env:GITHUB_ENV

      - name: üîå Connect Tailscale
        run: |
          $date = Get-Date -Format "MMdd-HHmm"
          $randomSuffix = Get-Random -Minimum 100 -Maximum 999
          $hostname = "win-$date-$randomSuffix"
          & "$env:ProgramFiles\Tailscale\tailscale.exe" up --authkey=${{ secrets.TAILSCALE_AUTH_KEY }} --hostname="$hostname"
          $tsIP = $null; $retries = 0
          while (-not $tsIP -and $retries -lt 10) {
              $tsIP = & "$env:ProgramFiles\Tailscale\tailscale.exe" ip -4
              Start-Sleep -Seconds 5
              $retries++
          }
          if (-not $tsIP) { Write-Error "Tailscale IP not assigned"; exit 1 }
          echo "TAILSCALE_IP=$tsIP" >> $env:GITHUB_ENV
          echo "TAILSCALE_HOSTNAME=$hostname" >> $env:GITHUB_ENV
          $tsIP | Out-File "last-ip.txt"

      - name: üî• Install Software (Brave, WinRAR, Telegram)
        continue-on-error: true
        run: |
          Write-Host "Installing Chocolatey package manager..."
          Set-ExecutionPolicy Bypass -Scope Process -Force
          [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072
          iex ((New-Object System.Net.WebClient).DownloadString('https://community.chocolatey.org/install.ps1'))
          Write-Host "Installing Brave Browser..."
          choco install brave -y --limit-output --no-progress
          Write-Host "Installing WinRAR..."
          choco install winrar -y --limit-output --no-progress
          Write-Host "Installing Telegram Desktop..."
          choco install telegram -y --limit-output --no-progress
          Write-Host "All software installed successfully!"

      - name: ‚úÖ Validate RDP Port
        run: |
          Start-Sleep -Seconds 120
          $result = Test-NetConnection -ComputerName $env:TAILSCALE_IP -Port 3389
          if (-not $result.TcpTestSucceeded) {
            Write-Error "Port 3389 not reachable via Tailscale"
            exit 1
          }

      - name: üìä System Info
        run: |
          Write-Host "`n=== SYSTEM INFORMATION ==="
          $cpu = (Get-WmiObject Win32_Processor).Name
          $ram = [math]::Round((Get-WmiObject Win32_ComputerSystem).TotalPhysicalMemory/1GB,2)
          $disk = [math]::Round((Get-PSDrive C).Free/1GB,2)
          Write-Host "CPU: $cpu"
          Write-Host "RAM: $ram GB"
          Write-Host "Disk Free: $disk GB"
          Write-Host "=========================="

      - name: üíæ Save Credentials to File
        run: |
          $date = Get-Date -Format 'yyyy-MM-dd HH:mm:ss'
          $content = "=== RDP ACCESS CREDENTIALS ===`n"
          $content += "IP Address Old: $env:OLD_IP`n"
          $content += "IP Address New: $env:TAILSCALE_IP`n"
          $content += "Username: RDP`n"
          $content += "Password: $env:RDP_PASSWORD`n"
          $content += "Hostname: $env:TAILSCALE_HOSTNAME`n"
          $content += "Valid for: 6 hours`n"
          $content += "Created: $date`n`n"
          $content += "Installed Software:`n"
          $content += "- Brave Browser`n"
          $content += "- WinRAR`n"
          $content += "- Telegram Desktop`n"
          $content += "==============================="
          $content | Out-File -FilePath rdp-access.txt -Encoding UTF8

      - name: üì¶ Upload Credentials Artifact
        uses: actions/upload-artifact@v4
        with:
          name: rdp-credentials
          path: rdp-access.txt
          retention-days: 1

      - name: üì± Send to Telegram (Optional)
        continue-on-error: true
        run: |
          try {
            $message = "üñ•Ô∏è RDP Ready!%0A%0Aüåê IP Old: $env:OLD_IP%0Aüåê IP New: $env:TAILSCALE_IP%0Aüë§ User: RDP%0Aüîë Pass: $env:RDP_PASSWORD%0Aüè∑Ô∏è Host: $env:TAILSCALE_HOSTNAME%0A%0Aüì¶ Software:%0A- Brave Browser%0A- WinRAR%0A- Telegram%0A%0A‚è∞ Valid: 6 hours%0AüìÖ $(Get-Date -Format 'yyyy-MM-dd HH:mm')"
            Invoke-WebRequest -Uri "https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage?chat_id=${{ secrets.TELEGRAM_CHAT_ID }}&text=$message" -Method Get -TimeoutSec 10
            Write-Host "Telegram notification sent successfully"
          } catch {
            Write-Host "Telegram notification skipped (secrets not configured)"
          }

      - name: üß≠ Show Credentials
        run: |
          Write-Host "`n=== RDP ACCESS ==="
          Write-Host ("IP Address Old: " + $env:OLD_IP)
          Write-Host ("IP Address New: " + $env:TAILSCALE_IP)
          Write-Host "Username: RDP"
          Write-Host ("Password: " + $env:RDP_PASSWORD)
          Write-Host ("Hostname: " + $env:TAILSCALE_HOSTNAME)
          Write-Host "`nInstalled Software:"
          Write-Host "- Brave Browser"
          Write-Host "- WinRAR"
          Write-Host "- Telegram Desktop"
          Write-Host "==================`n"

      - name: ü§ñ Start Human Simulation Bot
        shell: pwsh
        run: |
          Start-Job -ScriptBlock {
            Add-Type -AssemblyName System.Windows.Forms
            Add-Type -AssemblyName System.Drawing
            $random = New-Object System.Random
            
            $signature = @'
[DllImport("user32.dll")]
public static extern void mouse_event(int flags, int dx, int dy, int cData, int extraInfo);
'@
            $SendMouseClick = Add-Type -MemberDefinition $signature -Name "Win32MouseEvent" -Namespace Win32Functions -PassThru
            
            while($true) {
              try {
                $screenWidth = [System.Windows.Forms.Screen]::PrimaryScreen.Bounds.Width
                $screenHeight = [System.Windows.Forms.Screen]::PrimaryScreen.Bounds.Height
                
                $x = $random.Next(100, $screenWidth - 100)
                $y = $random.Next(100, $screenHeight - 100)
                [System.Windows.Forms.Cursor]::Position = New-Object System.Drawing.Point($x, $y)
                
                if ($random.Next(0, 100) -lt 3) {
                  $SendMouseClick::mouse_event(0x02, 0, 0, 0, 0)
                  Start-Sleep -Milliseconds 50
                  $SendMouseClick::mouse_event(0x04, 0, 0, 0, 0)
                }
                
                if ($random.Next(0, 100) -lt 2) {
                  [System.Windows.Forms.SendKeys]::SendWait(" ")
                }
                
                $sleepTime = $random.Next(30, 120)
                Start-Sleep -Seconds $sleepTime
              } catch {
                Start-Sleep -Seconds 60
              }
            }
          }
          Write-Host "Human simulation bot started in background"

      - name: üîÑ Keep-Alive with Advanced Health Check
        continue-on-error: true
        run: |
          $iteration = 0
          $pingTargets = @("api.github.com", "www.google.com", "1.1.1.1")
          $lastCleanup = Get-Date
          
          while ($true) {
              $iteration++
              $currentTime = Get-Date
              
              $rdpTest = Test-NetConnection -ComputerName localhost -Port 3389 -WarningAction SilentlyContinue
              if ($rdpTest.TcpTestSucceeded) {
                  Write-Host "[$(Get-Date -Format 'HH:mm:ss')] ‚úÖ RDP healthy (check #$iteration)"
              } else {
                  Write-Host "[$(Get-Date -Format 'HH:mm:ss')] ‚ö†Ô∏è RDP died! Restarting..."
                  Restart-Service -Name TermService -Force
                  Start-Sleep -Seconds 10
              }
              
              if ($iteration % 3 -eq 0) {
                  try {
                      $tsStatus = & "$env:ProgramFiles\Tailscale\tailscale.exe" status --json | ConvertFrom-Json
                      if ($tsStatus.BackendState -ne "Running") {
                          Write-Host "[$(Get-Date -Format 'HH:mm:ss')] ‚ö†Ô∏è Tailscale disconnected! Reconnecting..."
                          & "$env:ProgramFiles\Tailscale\tailscale.exe" up --authkey=${{ secrets.TAILSCALE_AUTH_KEY }}
                      } else {
                          Write-Host "[$(Get-Date -Format 'HH:mm:ss')] ‚úÖ Tailscale connected"
                      }
                  } catch {
                      Write-Host "[$(Get-Date -Format 'HH:mm:ss')] ‚ö†Ô∏è Tailscale check failed"
                  }
              }
              
              $randomInterval = Get-Random -Minimum 45 -Maximum 90
              $randomTarget = $pingTargets | Get-Random
              
              if ($iteration % 1 -eq 0) {
                  try {
                      $pingResult = Test-Connection -ComputerName $randomTarget -Count 1 -Quiet
                      if ($pingResult) {
                          Write-Host "[$(Get-Date -Format 'HH:mm:ss')] üåê Network ping to $randomTarget successful"
                      }
                  } catch {
                      Write-Host "[$(Get-Date -Format 'HH:mm:ss')] ‚ö†Ô∏è Network ping failed, continuing..."
                  }
              }
              
              if (($currentTime - $lastCleanup).TotalMinutes -gt 30) {
                  Write-Host "[$(Get-Date -Format 'HH:mm:ss')] üßπ Running cleanup tasks..."
                  Remove-Item -Path "$env:TEMP\*" -Recurse -Force -ErrorAction SilentlyContinue
                  Clear-RecycleBin -Force -ErrorAction SilentlyContinue
                  $lastCleanup = Get-Date
              }
              
              if ($iteration % 10 -eq 0) {
                  $cpu = Get-WmiObject Win32_Processor | Measure-Object -Property LoadPercentage -Average | Select-Object -ExpandProperty Average
                  $mem = Get-WmiObject Win32_OperatingSystem
                  $memUsage = [math]::Round((($mem.TotalVisibleMemorySize - $mem.FreePhysicalMemory) / $mem.TotalVisibleMemorySize) * 100, 2)
                  Write-Host "[$(Get-Date -Format 'HH:mm:ss')] üìä CPU: $cpu% | RAM: $memUsage%"
              }
              
              Start-Sleep -Seconds $randomInterval
          }
